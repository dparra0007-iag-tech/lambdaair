image: iagtech/docker:1.0.0-public

services:
  - name: iagtech/docker-dind:1.0.0-public
    alias: docker

stages:
- build code
- test code
- build application
- review application
- test application
- push binaries
- deploy application
# - regression test deploy
# - cleanup

variables:
  BUILD_NAME: $CI_PROJECT_NAME
  GITLAB_AIRPORTS_SERVICE_REGISTRY: registry.gitlab.com/iag-dev/glp/lambdaair/airports
  GITLAB_FLIGHTS_SERVICE_REGISTRY: registry.gitlab.com/iag-dev/glp/lambdaair/flights
  GITLAB_PRESENTATION_SERVICE_REGISTRY: registry.gitlab.com/iag-dev/glp/lambdaair/presentation
  GITLAB_SALES_SERVICE_REGISTRY: registry.gitlab.com/iag-dev/glp/lambdaair/sales
  GITLAB_SALESV2_SERVICE_REGISTRY: registry.gitlab.com/iag-dev/glp/lambdaair/salesv2
  GITLAB_ZUUL_SERVICE_REGISTRY: registry.gitlab.com/iag-dev/glp/lambdaair/zuul
  CONTAINER_AIRPORTS_SERVICE_IMAGE: lambdaair/airports
  CONTAINER_FLIGHTS_SERVICE_IMAGE: lambdaair/flights
  CONTAINER_PRESENTATION_SERVICE_IMAGE: lambdaair/presentation
  CONTAINER_SALES_SERVICE_IMAGE: lambdaair/sales
  CONTAINER_SALESV2_SERVICE_IMAGE: lambdaair/salesv2
  CONTAINER_ZUUL_SERVICE_IMAGE: lambdaair/zuul
  GITLAB_AIRPORTS_DESIGN_TEST_REGISTRY: registry.gitlab.com/iag-dev/glp/lambdaair/design-test/airports
  GITLAB_FLIGHTS_DESIGN_TEST_REGISTRY: registry.gitlab.com/iag-dev/glp/lambdaair/design-test/flights
  # URL_GLP_REGISTRY: https://iaghcp.jfrog.io/iaghcp/api/docker/docker-glp/v2/$IMAGE_NAME

### build code ###

build_airports_service_java:
  stage: build code
  image: maven:3.3.9-jdk-8
  before_script:
    - cd ./Airports
    - curl -fL https://getcli.jfrog.io | sh
    - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
    - ./jfrog rt c show
    - export M2_HOME=/usr/share/maven
    - sed -i 's,MAVEN_SNAPSHOT_REPO_KEY,'"$MAVEN_SNAPSHOT_REPO_KEY"',g' configuration.yml
    - sed -i 's,MAVEN_RELEASE_REPO_KEY,'"$MAVEN_RELEASE_REPO_KEY"',g' configuration.yml
  script:
    - ./jfrog rt mvn "clean install package" configuration.yml --build-name=Airports-$BUILD_NAME --build-number=$CI_PIPELINE_ID
    - ./jfrog rt bce Airports-$BUILD_NAME $CI_PIPELINE_ID
    - ./jfrog rt bp Airports-$BUILD_NAME $CI_PIPELINE_ID
  artifacts:
    paths:
      - ./Airports/target/*
  except:
    - triggers

# build_flights_service_java:
#   stage: build code
#   image: maven:3.3.9-jdk-8
#   before_script:
#     - cd ./Flights
#     - curl -fL https://getcli.jfrog.io | sh
#     - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
#     - ./jfrog rt c show
#     - export M2_HOME=/usr/share/maven
#     - sed -i 's,MAVEN_SNAPSHOT_REPO_KEY,'"$MAVEN_SNAPSHOT_REPO_KEY"',g' configuration.yml
#     - sed -i 's,MAVEN_RELEASE_REPO_KEY,'"$MAVEN_RELEASE_REPO_KEY"',g' configuration.yml
#   script:
#     - ./jfrog rt mvn "clean install package" configuration.yml --build-name=Flights-$BUILD_NAME --build-number=$CI_PIPELINE_ID
#     - ./jfrog rt bce Flights-$BUILD_NAME $CI_PIPELINE_ID
#     - ./jfrog rt bp Flights-$BUILD_NAME $CI_PIPELINE_ID
#   artifacts:
#     paths:
#       - ./Flights/target/*
#   except:
#     - triggers

# build_presentation_service_java:
#   stage: build code
#   image: maven:3.3.9-jdk-8
#   before_script:
#     - cd ./Presentation
#     - curl -fL https://getcli.jfrog.io | sh
#     - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
#     - ./jfrog rt c show
#     - export M2_HOME=/usr/share/maven
#     - sed -i 's,MAVEN_SNAPSHOT_REPO_KEY,'"$MAVEN_SNAPSHOT_REPO_KEY"',g' configuration.yml
#     - sed -i 's,MAVEN_RELEASE_REPO_KEY,'"$MAVEN_RELEASE_REPO_KEY"',g' configuration.yml
#   script:
#     - ./jfrog rt mvn "clean install package" configuration.yml --build-name=Presentation-$BUILD_NAME --build-number=$CI_PIPELINE_ID
#     - ./jfrog rt bce Presentation-$BUILD_NAME $CI_PIPELINE_ID
#     - ./jfrog rt bp Presentation-$BUILD_NAME $CI_PIPELINE_ID
#   artifacts:
#     paths:
#       - ./Presentation/target/*
#   except:
#     - triggers

# build_sales_service_java:
#   stage: build code
#   image: maven:3.3.9-jdk-8
#   before_script:
#     - cd ./Sales
#     - curl -fL https://getcli.jfrog.io | sh
#     - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
#     - ./jfrog rt c show
#     - export M2_HOME=/usr/share/maven
#     - sed -i 's,MAVEN_SNAPSHOT_REPO_KEY,'"$MAVEN_SNAPSHOT_REPO_KEY"',g' configuration.yml
#     - sed -i 's,MAVEN_RELEASE_REPO_KEY,'"$MAVEN_RELEASE_REPO_KEY"',g' configuration.yml
#   script:
#     - ./jfrog rt mvn "clean install package" configuration.yml --build-name=Sales-$BUILD_NAME --build-number=$CI_PIPELINE_ID
#     - ./jfrog rt bce Sales-$BUILD_NAME $CI_PIPELINE_ID
#     - ./jfrog rt bp Sales-$BUILD_NAME $CI_PIPELINE_ID
#   artifacts:
#     paths:
#       - ./Sales/target/*
#   except:
#     - triggers

# build_salesv2_service_java:
#   stage: build code
#   image: maven:3.3.9-jdk-8
#   before_script:
#     - cd ./Salesv2
#     - curl -fL https://getcli.jfrog.io | sh
#     - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
#     - ./jfrog rt c show
#     - export M2_HOME=/usr/share/maven
#     - sed -i 's,MAVEN_SNAPSHOT_REPO_KEY,'"$MAVEN_SNAPSHOT_REPO_KEY"',g' configuration.yml
#     - sed -i 's,MAVEN_RELEASE_REPO_KEY,'"$MAVEN_RELEASE_REPO_KEY"',g' configuration.yml
#   script:
#     - ./jfrog rt mvn "clean install package" configuration.yml --build-name=Salesv2-$BUILD_NAME --build-number=$CI_PIPELINE_ID
#     - ./jfrog rt bce Salesv2-$BUILD_NAME $CI_PIPELINE_ID
#     - ./jfrog rt bp Salesv2-$BUILD_NAME $CI_PIPELINE_ID
#   artifacts:
#     paths:
#       - ./Salesv2/target/*
#   except:
#     - triggers

# build_zuul_service_java:
#   stage: build code
#   image: maven:3.3.9-jdk-8
#   before_script:
#     - cd ./Zuul
#     - curl -fL https://getcli.jfrog.io | sh
#     - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
#     - ./jfrog rt c show
#     - export M2_HOME=/usr/share/maven
#     - sed -i 's,MAVEN_SNAPSHOT_REPO_KEY,'"$MAVEN_SNAPSHOT_REPO_KEY"',g' configuration.yml
#     - sed -i 's,MAVEN_RELEASE_REPO_KEY,'"$MAVEN_RELEASE_REPO_KEY"',g' configuration.yml
#   script:
#     - ./jfrog rt mvn "clean install package" configuration.yml --build-name=Zuul-$BUILD_NAME --build-number=$CI_PIPELINE_ID
#     - ./jfrog rt bce Zuul-$BUILD_NAME $CI_PIPELINE_ID
#     - ./jfrog rt bp Zuul-$BUILD_NAME $CI_PIPELINE_ID
#   artifacts:
#     paths:
#       - ./Zuul/target/*
#   except:
#     - triggers

  ### build code ###

  ### test code ###

unit_integration_test_airports_service:
  stage: test code
  image: maven:3.3.9-jdk-8
  before_script:
    - cd ./Airports
    -  curl -fL https://getcli.jfrog.io | sh
    - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
    - ./jfrog rt c show
    - export M2_HOME=/usr/share/maven
    - sed -i 's,MAVEN_SNAPSHOT_REPO_KEY,'"$MAVEN_SNAPSHOT_REPO_KEY"',g' configuration.yml
    - sed -i 's,MAVEN_RELEASE_REPO_KEY,'"$MAVEN_RELEASE_REPO_KEY"',g' configuration.yml
  script:
    - ./jfrog rt mvn "test" configuration.yml --build-name=Airports-$BUILD_NAME-Test --build-number=$CI_PIPELINE_ID
  except:
    - triggers

# unit_integration_test_flights_service:
#   stage: test code
#   image: maven:3.3.9-jdk-8
#   before_script:
#     - cd ./Airports
#     -  curl -fL https://getcli.jfrog.io | sh
#     - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
#     - ./jfrog rt c show
#     - export M2_HOME=/usr/share/maven
#     - sed -i 's,MAVEN_SNAPSHOT_REPO_KEY,'"$MAVEN_SNAPSHOT_REPO_KEY"',g' configuration.yml
#     - sed -i 's,MAVEN_RELEASE_REPO_KEY,'"$MAVEN_RELEASE_REPO_KEY"',g' configuration.yml
#   script:
#     - ./jfrog rt mvn "test" configuration.yml --build-name=Flights-$BUILD_NAME-Test --build-number=$CI_PIPELINE_ID
#   except:
#     - triggers

# unit_integration_test_presentation_service:
#   stage: test code
#   image: maven:3.3.9-jdk-8
#   before_script:
#     - cd ./Airports
#     -  curl -fL https://getcli.jfrog.io | sh
#     - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
#     - ./jfrog rt c show
#     - export M2_HOME=/usr/share/maven
#     - sed -i 's,MAVEN_SNAPSHOT_REPO_KEY,'"$MAVEN_SNAPSHOT_REPO_KEY"',g' configuration.yml
#     - sed -i 's,MAVEN_RELEASE_REPO_KEY,'"$MAVEN_RELEASE_REPO_KEY"',g' configuration.yml
#   script:
#     - ./jfrog rt mvn "test" configuration.yml --build-name=Presentation-$BUILD_NAME-Test --build-number=$CI_PIPELINE_ID
#   except:
#     - triggers

# unit_integration_test_sales_service:
#   stage: test code
#   image: maven:3.3.9-jdk-8
#   before_script:
#     - cd ./Airports
#     -  curl -fL https://getcli.jfrog.io | sh
#     - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
#     - ./jfrog rt c show
#     - export M2_HOME=/usr/share/maven
#     - sed -i 's,MAVEN_SNAPSHOT_REPO_KEY,'"$MAVEN_SNAPSHOT_REPO_KEY"',g' configuration.yml
#     - sed -i 's,MAVEN_RELEASE_REPO_KEY,'"$MAVEN_RELEASE_REPO_KEY"',g' configuration.yml
#   script:
#     - ./jfrog rt mvn "test" configuration.yml --build-name=Sales-$BUILD_NAME-Test --build-number=$CI_PIPELINE_ID
#   except:
#     - triggers

# unit_integration_test_fsalesv2_service:
#   stage: test code
#   image: maven:3.3.9-jdk-8
#   before_script:
#     - cd ./Airports
#     -  curl -fL https://getcli.jfrog.io | sh
#     - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
#     - ./jfrog rt c show
#     - export M2_HOME=/usr/share/maven
#     - sed -i 's,MAVEN_SNAPSHOT_REPO_KEY,'"$MAVEN_SNAPSHOT_REPO_KEY"',g' configuration.yml
#     - sed -i 's,MAVEN_RELEASE_REPO_KEY,'"$MAVEN_RELEASE_REPO_KEY"',g' configuration.yml
#   script:
#     - ./jfrog rt mvn "test" configuration.yml --build-name=Salesv2-$BUILD_NAME-Test --build-number=$CI_PIPELINE_ID
#   except:
#     - triggers

# unit_integration_test_zuul_service:
#   stage: test code
#   image: maven:3.3.9-jdk-8
#   before_script:
#     - cd ./Airports
#     -  curl -fL https://getcli.jfrog.io | sh
#     - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
#     - ./jfrog rt c show
#     - export M2_HOME=/usr/share/maven
#     - sed -i 's,MAVEN_SNAPSHOT_REPO_KEY,'"$MAVEN_SNAPSHOT_REPO_KEY"',g' configuration.yml
#     - sed -i 's,MAVEN_RELEASE_REPO_KEY,'"$MAVEN_RELEASE_REPO_KEY"',g' configuration.yml
#   script:
#     - ./jfrog rt mvn "test" configuration.yml --build-name=Zuul-$BUILD_NAME-Test --build-number=$CI_PIPELINE_ID
#   except:
#     - triggers

# ---------------

# static_test_airports_service:
#   stage: test code
#   variables:
#     PROJECT_KEY: "$CI_PROJECT_NAMESPACE:$CI_PROJECT_NAME"
#   # before_script:
#   #   - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS
#   script:
#     - docker run --rm -v $(pwd):/data -w /data iagtech/sonar-scanner:2.0.1 sonar-scanner
#      -Dsonar.projectKey=${PROJECT_KEY//[\/]/_}_Airports
#      -Dsonar.projectName=$CI_PROJECT_NAME_Airports 
#      -Dsonar.branch.name=$CI_COMMIT_REF_NAME 
#      -Dsonar.projectVersion=$CI_JOB_ID
#      -Dsonar.sources=./Airports/src 
#      -Dsonar.java.binaries=./Airports/target 
#      -Dsonar.gitlab.project_id=$CI_PROJECT_ID_Airports 
#      -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA 
#      -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
#   # after_script:
#   #   - docker logout
#   except:
#     - triggers

# static_test_flights_service:
#   stage: test code
#   variables:
#     PROJECT_KEY: "$CI_PROJECT_NAMESPACE:$CI_PROJECT_NAME"
#   # before_script:
#   #   - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS
#   script:
#     - docker run --rm -v $(pwd):/data -w /data iagtech/sonar-scanner:2.0.1 sonar-scanner
#      -Dsonar.projectKey=${PROJECT_KEY//[\/]/_}_Flights
#      -Dsonar.projectName=$CI_PROJECT_NAME_Flights 
#      -Dsonar.branch.name=$CI_COMMIT_REF_NAME 
#      -Dsonar.projectVersion=$CI_JOB_ID
#      -Dsonar.sources=./Flights/src 
#      -Dsonar.java.binaries=./Flights/target 
#      -Dsonar.gitlab.project_id=$CI_PROJECT_ID_Flights 
#      -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA 
#      -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
#   # after_script:
#   #   - docker logout
#   except:
#     - triggers

# static_test_presentation_service:
#   stage: test code
#   variables:
#     PROJECT_KEY: "$CI_PROJECT_NAMESPACE:$CI_PROJECT_NAME"
#   # before_script:
#   #   - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS
#   script:
#     - docker run --rm -v $(pwd):/data -w /data iagtech/sonar-scanner:2.0.1 sonar-scanner
#      -Dsonar.projectKey=${PROJECT_KEY//[\/]/_}_Presentation
#      -Dsonar.projectName=$CI_PROJECT_NAME_Presentation 
#      -Dsonar.branch.name=$CI_COMMIT_REF_NAME 
#      -Dsonar.projectVersion=$CI_JOB_ID
#      -Dsonar.sources=./Presentation/src 
#      -Dsonar.java.binaries=./Presentation/target 
#      -Dsonar.gitlab.project_id=$CI_PROJECT_ID_Presentation 
#      -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA 
#      -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
#   # after_script:
#   #   - docker logout
#   except:
#     - triggers

# static_test_sales_service:
#   stage: test code
#   variables:
#     PROJECT_KEY: "$CI_PROJECT_NAMESPACE:$CI_PROJECT_NAME"
#   # before_script:
#   #   - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS
#   script:
#     - docker run --rm -v $(pwd):/data -w /data iagtech/sonar-scanner:2.0.1 sonar-scanner
#      -Dsonar.projectKey=${PROJECT_KEY//[\/]/_}_Sales
#      -Dsonar.projectName=$CI_PROJECT_NAME_Sales 
#      -Dsonar.branch.name=$CI_COMMIT_REF_NAME 
#      -Dsonar.projectVersion=$CI_JOB_ID
#      -Dsonar.sources=./Sales/src 
#      -Dsonar.java.binaries=./Sales/target 
#      -Dsonar.gitlab.project_id=$CI_PROJECT_ID_Sales 
#      -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA 
#      -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
#   # after_script:
#   #   - docker logout
#   except:
#     - triggers

# static_test_salesv2_service:
#   stage: test code
#   variables:
#     PROJECT_KEY: "$CI_PROJECT_NAMESPACE:$CI_PROJECT_NAME"
#   # before_script:
#   #   - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS
#   script:
#     - docker run --rm -v $(pwd):/data -w /data iagtech/sonar-scanner:2.0.1 sonar-scanner
#      -Dsonar.projectKey=${PROJECT_KEY//[\/]/_}_Salesv2
#      -Dsonar.projectName=$CI_PROJECT_NAME_Salesv2 
#      -Dsonar.branch.name=$CI_COMMIT_REF_NAME 
#      -Dsonar.projectVersion=$CI_JOB_ID
#      -Dsonar.sources=./Salesv2/src 
#      -Dsonar.java.binaries=./Salesv2/target 
#      -Dsonar.gitlab.project_id=$CI_PROJECT_ID_Salesv2 
#      -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA 
#      -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
#   # after_script:
#   #   - docker logout
#   except:
#     - triggers

# static_test_zuul_service:
#   stage: test code
#   variables:
#     PROJECT_KEY: "$CI_PROJECT_NAMESPACE:$CI_PROJECT_NAME"
#   # before_script:
#   #   - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS
#   script:
#     - docker run --rm -v $(pwd):/data -w /data iagtech/sonar-scanner:2.0.1 sonar-scanner
#      -Dsonar.projectKey=${PROJECT_KEY//[\/]/_}_Zuul
#      -Dsonar.projectName=$CI_PROJECT_NAME_Zuul 
#      -Dsonar.branch.name=$CI_COMMIT_REF_NAME 
#      -Dsonar.projectVersion=$CI_JOB_ID
#      -Dsonar.sources=./Zuul/src 
#      -Dsonar.java.binaries=./Zuul/target 
#      -Dsonar.gitlab.project_id=$CI_PROJECT_ID_Zuul 
#      -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA 
#      -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
#   # after_script:
#   #   - docker logout
#   except:
#     - triggers

### test code ###

### build application ###

build_airport_service:
  stage: build application
  variables:
    BASH: /usr/local/bin/
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - make build PATH=./Airports SERVICE_REGISTRY=$GITLAB_AIRPORTS_SERVICE_REGISTRY BASH=$BASH JAR_NAME=airports-1.0-SANPSHOT.jar
    - docker tag $GITLAB_AIRPORTS_SERVICE_REGISTRY $GITLAB_AIRPORTS_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
    - docker push $GITLAB_AIRPORTS_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
  dependencies:
    - build_airports_service_java
  except:
    - triggers

# build_flights_service:
#   stage: build application
#   variables:
#     BASH: /usr/local/bin/
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#     - make build PATH=./Flights SERVICE_REGISTRY=$GITLAB_FLIGHTS_SERVICE_REGISTRY BASH=$BASH JAR_NAME=flights-1.0-SANPSHOT.jar
#     - docker tag $GITLAB_FLIGHTS_SERVICE_REGISTRY $GITLAB_FLIGHTS_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#     - docker push $GITLAB_FLIGHTS_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#   dependencies:
#     - build_flights_service_java
#   except:
#     - triggers

# build_presentation_service:
#   stage: build application
#   variables:
#     BASH: /usr/local/bin/
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#     - make build PATH=./Presentation SERVICE_REGISTRY=$GITLAB_PRESENTATION_SERVICE_REGISTRY BASH=$BASH JAR_NAME=presentation-1.0-SANPSHOT.jar
#     - docker tag $GITLAB_PRESENTATION_SERVICE_REGISTRY $GITLAB_PRESENTATION_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#     - docker push $GITLAB_PRESENTATION_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#   dependencies:
#     - build_presentation_service_java
#   except:
#     - triggers

# build_sales_service:
#   stage: build application
#   variables:
#     BASH: /usr/local/bin/
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#     - make build PATH=./Sales SERVICE_REGISTRY=$GITLAB_SALES_SERVICE_REGISTRY BASH=$BASH JAR_NAME=sales-1.0-SANPSHOT.jar
#     - docker tag $GITLAB_SALES_SERVICE_REGISTRY $GITLAB_SALES_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#     - docker push $GITLAB_SALES_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#   dependencies:
#     - build_sales_service_java
#   except:
#     - triggers

# build_salesv2_service:
#   stage: build application
#   variables:
#     BASH: /usr/local/bin/
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#     - make build PATH=./Salesv2 SERVICE_REGISTRY=$GITLAB_SALESV2_SERVICE_REGISTRY BASH=$BASH JAR_NAME=salesv2-1.0-SANPSHOT.jar
#     - docker tag $GITLAB_SALESV2_SERVICE_REGISTRY $GITLAB_SALESV2_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#     - docker push $GITLAB_SALESV2_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#   dependencies:
#     - build_salesv2_service_java
#   except:
#     - triggers

# build_zuul_service:
#   stage: build application
#   variables:
#     BASH: /usr/local/bin/
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#     - make build PATH=./Zuul SERVICE_REGISTRY=$GITLAB_ZUUL_SERVICE_REGISTRY BASH=$BASH JAR_NAME=zuul-1.0-SANPSHOT.jar
#     - docker tag $GITLAB_ZUUL_SERVICE_REGISTRY $GITLAB_ZUUL_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#     - docker push $GITLAB_ZUUL_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#   dependencies:
#     - build_zuul_service_java
#   except:
#     - triggers

build_airports_design_test:
  stage: build application
  before_script:
    - cd ./Design-test
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build -t $GITLAB_AIRPORTS_DESIGN_TEST_REGISTRY -f Dockerfile.airports .
    - docker tag $GITLAB_AIRPORTS_DESIGN_TEST_REGISTRY $GITLAB_AIRPORTS_DESIGN_TEST_REGISTRY:$CI_COMMIT_REF_NAME
    - docker push $GITLAB_AIRPORTS_DESIGN_TEST_REGISTRY:$CI_COMMIT_REF_NAME
  except:
    - triggers

build_flights_design_test:
  stage: build application
  before_script:
    - cd ./Design-test
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build -t $GITLAB_FLIGHTS_DESIGN_TEST_REGISTRY -f Dockerfile.flights .
    - docker tag $GITLAB_FLIGHTS_DESIGN_TEST_REGISTRY $GITLAB_FLIGHTS_DESIGN_TEST_REGISTRY:$CI_COMMIT_REF_NAME
    - docker push $GITLAB_FLIGHTS_DESIGN_TEST_REGISTRY:$CI_COMMIT_REF_NAME
  except:
    - triggers

### build application ###

### push application ###

# push_airports_service_binaries:
#   stage: push binaries
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#     - docker pull $GITLAB_AIRPORTS_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#     - docker tag $GITLAB_AIRPORTS_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME $CONTAINER_AIRPORTS_SERVICE_IMAGE
#     - make push ARTIFACTORY_URL=$ARTIFACTORY_URL ARTIFACTORY_USER=$DOCKER_HUB_USER ARTIFACTORY_PASS=$DOCKER_HUB_PASS CONTAINER_SERVICE_IMAGE=$CONTAINER_AIRPORTS_SERVICE_IMAGE DOCKER_REPO_KEY=$DOCKER_REPO_KEY BUILD_NAME=$BUILD_NAME CI_PIPELINE_ID=$CI_PIPELINE_ID URL_GLP_REGISTRY=$URL_GLP_REGISTRY
#   only:
#     - master
#   except:
#     - triggers

# push_flights_service_binaries:
#   stage: push binaries
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#     - docker pull $GITLAB_FLIGHTS_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#     - docker tag $GITLAB_FLIGHTS_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME $CONTAINER_FLIGHTS_SERVICE_IMAGE
#     - make push ARTIFACTORY_URL=$ARTIFACTORY_URL ARTIFACTORY_USER=$DOCKER_HUB_USER ARTIFACTORY_PASS=$DOCKER_HUB_PASS CONTAINER_SERVICE_IMAGE=$CONTAINER_FLIGHTS_SERVICE_IMAGE DOCKER_REPO_KEY=$DOCKER_REPO_KEY BUILD_NAME=$BUILD_NAME CI_PIPELINE_ID=$CI_PIPELINE_ID URL_GLP_REGISTRY=$URL_GLP_REGISTRY
#   only:
#     - master
#   except:
#     - triggers

# push_presentation_service_binaries:
#   stage: push binaries
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#     - docker pull $GITLAB_PRESENTATION_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#     - docker tag $GITLAB_PRESENTATION_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME $CONTAINER_PRESENTATION_SERVICE_IMAGE
#     - make push ARTIFACTORY_URL=$ARTIFACTORY_URL ARTIFACTORY_USER=$DOCKER_HUB_USER ARTIFACTORY_PASS=$DOCKER_HUB_PASS CONTAINER_SERVICE_IMAGE=$CONTAINER_PRESENTATION_SERVICE_IMAGE DOCKER_REPO_KEY=$DOCKER_REPO_KEY BUILD_NAME=$BUILD_NAME CI_PIPELINE_ID=$CI_PIPELINE_ID URL_GLP_REGISTRY=$URL_GLP_REGISTRY
#   only:
#     - master
#   except:
#     - triggers

# push_sales_service_binaries:
#   stage: push binaries
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#     - docker pull $GITLAB_SALES_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#     - docker tag $GITLAB_SALES_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME $CONTAINER_SALES_SERVICE_IMAGE
#     - make push ARTIFACTORY_URL=$ARTIFACTORY_URL ARTIFACTORY_USER=$DOCKER_HUB_USER ARTIFACTORY_PASS=$DOCKER_HUB_PASS CONTAINER_SERVICE_IMAGE=$CONTAINER_SALES_SERVICE_IMAGE DOCKER_REPO_KEY=$DOCKER_REPO_KEY BUILD_NAME=$BUILD_NAME CI_PIPELINE_ID=$CI_PIPELINE_ID URL_GLP_REGISTRY=$URL_GLP_REGISTRY
#   only:
#     - master
#   except:
#     - triggers

# push_salesv2_service_binaries:
#   stage: push binaries
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#     - docker pull $GITLAB_SALESV2_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#     - docker tag $GITLAB_SALESV2_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME $CONTAINER_SALESV2_SERVICE_IMAGE
#     - make push ARTIFACTORY_URL=$ARTIFACTORY_URL ARTIFACTORY_USER=$DOCKER_HUB_USER ARTIFACTORY_PASS=$DOCKER_HUB_PASS CONTAINER_SERVICE_IMAGE=$CONTAINER_SALESV2_SERVICE_IMAGE DOCKER_REPO_KEY=$DOCKER_REPO_KEY BUILD_NAME=$BUILD_NAME CI_PIPELINE_ID=$CI_PIPELINE_ID URL_GLP_REGISTRY=$URL_GLP_REGISTRY
#   only:
#     - master
#   except:
#     - triggers

# push_zuul_service_binaries:
#   stage: push binaries
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#     - docker pull $GITLAB_ZUUL_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
#     - docker tag $GITLAB_ZUUL_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME $CONTAINER_ZUUL_SERVICE_IMAGE
#     - make push ARTIFACTORY_URL=$ARTIFACTORY_URL ARTIFACTORY_USER=$DOCKER_HUB_USER ARTIFACTORY_PASS=$DOCKER_HUB_PASS CONTAINER_SERVICE_IMAGE=$CONTAINER_ZUUL_SERVICE_IMAGE DOCKER_REPO_KEY=$DOCKER_REPO_KEY BUILD_NAME=$BUILD_NAME CI_PIPELINE_ID=$CI_PIPELINE_ID URL_GLP_REGISTRY=$URL_GLP_REGISTRY
#   only:
#     - master
#   except:
#     - triggers

### push application ###

### deploy ###

.deploy: &deploy
  image: iagtech/openshift-cli:1.0.0-public
  script:

    - eval $DEPLOYMENT_CMD
    - cp $DEPLOYMENT_FILE deployment-$CI_JOB_ID.yml

    - sed -i -e "s/{{CI_TAG_AIRPORTS_SERVICE}}/$CI_TAG_AIRPORTS_SERVICE/g" deployment-$CI_JOB_ID.yml
    - sed -i -e "s/{{CI_TAG_FLIGHTS_SERVICE}}/$CI_TAG_FLIGHTS_SERVICE/g" deployment-$CI_JOB_ID.yml
    - sed -i -e "s/{{CI_TAG_PRESENTATION_SERVICE}}/$CI_TAG_PRESENTATION_SERVICE/g" deployment-$CI_JOB_ID.yml
    - sed -i -e "s/{{CI_TAG_SALES_SERVICE}}/$CI_TAG_SALES_SERVICE/g" deployment-$CI_JOB_ID.yml
    - sed -i -e "s/{{CI_TAG_SALESV2_SERVICE}}/$CI_TAG_SALESV2_SERVICE/g" deployment-$CI_JOB_ID.yml
    - sed -i -e "s/{{CI_TAG_ZUUL_SERVICE}}/$CI_TAG_ZUUL_SERVICE/g" deployment-$CI_JOB_ID.yml
    # - sed -i -e "s/{{TAG_FUNCTIONAL_TEST}}/$CI_TAG_FUNCTIONAL_TEST/g" deployment-$CI_JOB_ID.yml
    # - sed -i -e "s/{{TAG_PERFORMANCE_TEST}}/$CI_TAG_PERFORMANCE_TEST/g" deployment-$CI_JOB_ID.yml
    - sed -i -e "s/{{CI_TAG_AIRPORTS_DESIGN_TEST}}/$CI_TAG_AIRPORTS_DESIGN_TEST/g" deployment-$CI_JOB_ID.yml
    - sed -i -e "s/{{CI_TAG_FLIGHTS_DESIGN_TEST}}/$CI_TAG_FLIGHTS_DESIGN_TEST/g" deployment-$CI_JOB_ID.yml

    - sed -i -e "s#{{IMG_AIRPORTS_SERVICE}}#$CI_IMG_AIRPORTS_SERVICE#g" deployment-$CI_JOB_ID.yml
    - sed -i -e "s#{{IMG_FLIGHTS_SERVICE}}#$CI_IMG_FLIGHTS_SERVICE#g" deployment-$CI_JOB_ID.yml
    - sed -i -e "s#{{IMG_PRESENTATION_SERVICE}}#$CI_IMG_PRESENTATION_SERVICE#g" deployment-$CI_JOB_ID.yml
    - sed -i -e "s#{{IMG_SALES_SERVICE}}#$CI_IMG_SALES_SERVICE#g" deployment-$CI_JOB_ID.yml
    - sed -i -e "s#{{IMG_SALESV2_SERVICE}}#$CI_IMG_SALESV2_SERVICE#g" deployment-$CI_JOB_ID.yml
    - sed -i -e "s#{{IMG_ZUUL_SERVICE}}#$CI_IMG_ZUUL_SERVICE#g" deployment-$CI_JOB_ID.yml
    # - sed -i -e "s#{{IMG_FUNCTIONAL_TEST}}#$CI_IMG_FUNCTIONAL_TEST#g" deployment-$CI_JOB_ID.yml
    # - sed -i -e "s#{{IMG_PERFORMANCE_TEST}}#$CI_IMG_PERFORMANCE_TEST#g" deployment-$CI_JOB_ID.yml
    - sed -i -e "s#{{CI_IMG_AIRPORTS_DESIGN_TEST}}#$CI_IMG_AIRPORTS_DESIGN_TEST#g" deployment-$CI_JOB_ID.yml
    - sed -i -e "s#{{CI_IMG_FLIGHTS_DESIGN_TEST}}#$CI_IMG_FLIGHTS_DESIGN_TEST#g" deployment-$CI_JOB_ID.yml

    # - sed -i -e "s/{{TAG_GLOBALCONF}}/$TAG_GLOBALCONF/g" deployment-$CI_JOB_ID.yml
    # - sed -i -e "s/{{TAG_SYSTEMCONF}}/$TAG_SYSTEMCONF/g" deployment-$CI_JOB_ID.yml

    # - sed -i -e "s/{{ENV_HIPTEST_TOKEN}}/$HIPTEST_TOKEN/g" deployment-$CI_JOB_ID.yml
    # - sed -i -e "s/{{ENV_HIPTEST_FUNC_TEST}}/$CI_HIPTEST_FUNC_TEST/g" deployment-$CI_JOB_ID.yml
    # - sed -i -e "s/{{ENV_HIPTEST_PERF_TEST}}/$CI_HIPTEST_PERF_TEST/g" deployment-$CI_JOB_ID.yml

    - oc login $OC_URL --token $OC_TOKEN --insecure-skip-tls-verify
    - oc project "$PROJECT" 2> /dev/null || oc new-project "$PROJECT"
    - oc describe secret $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME || ( oc create secret docker-registry $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME
     --docker-server=gitlab.com 
     --docker-username=$GITLAB_REGISTRY_USER_FROM_OC 
     --docker-password=$GITLAB_REGISTRY_PASS_FROM_OC 
     --docker-email=$GITLAB_REGISTRY_EMAIL_FROM_OC && 
     oc secrets link default $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME --for=pull && 
     oc secrets link deployer $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME --for=pull && 
     oc secrets link builder $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME --for=pull )
    - oc describe secret $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME-registry || ( oc create secret docker-registry $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME-registry
     --docker-server=registry.gitlab.com 
     --docker-username=$GITLAB_REGISTRY_USER_FROM_OC 
     --docker-password=$GITLAB_REGISTRY_PASS_FROM_OC 
     --docker-email=$GITLAB_REGISTRY_EMAIL_FROM_OC && 
     oc secrets link default $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME-registry --for=pull && 
     oc secrets link deployer $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME-registry --for=pull && 
     oc secrets link builder $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME-registry --for=pull )
    - make deploy DEPLOYMENT_FILE=deployment-$CI_JOB_ID.yml
  artifacts:
    paths:
      - deployment-$CI_JOB_ID.yml

.stop: &stop
  image: iagtech/openshift-cli:1.0.0-public
  script:
    - oc login $OC_URL_STG --token $OC_TOKEN_STG --insecure-skip-tls-verify
    - oc delete project $PROJECT

review:
  <<: *deploy
  stage: review application
  variables:
    OPENSHIFT_DOMAIN: dit-iaggs.com
    PROJECT: $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME
    DEPLOYMENT_CMD: "$(cat deployment-init.yml ./Airports/deployment.yml ./Flights/deployment.yml ./Presentation/deployment.yml ./Sales/deployment.yml ./Salesv2/deployment.yml ./Zipkin/deployment.yml ./Zuul/deployment.yml deployment-end.yml > deployment-review.yml)"
    DEPLOYMENT_FILE: deployment-review.yml
    OC_URL: $OC_URL_STG
    OC_TOKEN: $OC_TOKEN_STG

    CI_TAG_AIRPORTS_SERVICE: $CI_COMMIT_REF_NAME
    CI_TAG_FLIGHTS_SERVICE: $CI_COMMIT_REF_NAME
    CI_TAG_PRESENTATION_SERVICE: $CI_COMMIT_REF_NAME
    CI_TAG_SALES_SERVICE: $CI_COMMIT_REF_NAME
    CI_TAG_SALESV2_SERVICE: $CI_COMMIT_REF_NAME
    CI_TAG_ZUUL_SERVICE: $CI_COMMIT_REF_NAME
    # CI_TAG_DESIGN_TEST: $CI_COMMIT_REF_NAME
    # CI_TAG_PERFORMANCE_TEST: $CI_COMMIT_REF_NAME
    # CI_TAG_FUNCTIONAL_TEST: $CI_COMMIT_REF_NAME
    CI_IMG_AIRPORTS_SERVICE: $GITLAB_AIRPORTS_SERVICE_REGISTRY
    CI_IMG_FLIGHTS_SERVICE: $GITLAB_FLIGHTS_SERVICE_REGISTRY
    CI_IMG_PRESENTATION_SERVICE: $GITLAB_PRESENTATION_SERVICE_REGISTRY
    CI_IMG_SALES_SERVICE: $GITLAB_SALES_SERVICE_REGISTRY
    CI_IMG_SALESV2_SERVICE: $GITLAB_SALESV2_SERVICE_REGISTRY
    CI_IMG_ZUUL_SERVICE: $GITLAB_ZUUL_SERVICE_REGISTRY
    # CI_IMG_DESIGN_TEST: $GITLAB_DESIGN_TEST_REGISTRY
    # CI_IMG_PERFORMANCE_TEST: $GITLAB_PERFORMANCE_TEST_REGISTRY
    # CI_IMG_FUNCTIONAL_TEST: $GITLAB_FUNCTIONAL_TEST_REGISTRY
    # CI_HIPTEST_FUNC_TEST: $HIPTEST_REGRESSION_TEST_STG
    # TAG_GLOBALCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/stg\/env.sh'
    # TAG_SYSTEMCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/glp-greetingapi-stg\/env.sh'
  environment:
    name: $CI_PROJECT_NAME/$CI_BUILD_REF_NAME
    url: http://presentation-$CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME.$OPENSHIFT_DOMAIN
    on_stop: stop-review
  only:
    - branches
  except:
    - master

stop-review:
  <<: *stop
  stage: review application
  variables:
    PROJECT: $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME
  when: manual
  environment:
    name: $CI_PROJECT_NAME/$CI_BUILD_REF_NAME
    action: stop
  only:
    - branches
  except:
    - master

# deploy_staging:
#   <<: *deploy
#   stage: deploy application
#   variables:
#     OPENSHIFT_DOMAIN: dit-iaggs.com
#     PROJECT: $CI_PROJECT_PATH_SLUG
#     DEPLOYMENT_CMD: "$(cat deployment-init.yml ./Airports/deployment.yml ./Flights/deployment.yml ./Presentation/deployment.yml ./Sales/deployment.yml ./Salesv2/deployment.yml ./Zipkin/deployment.yml ./Zuul/deployment.yml deployment-end.yml > deployment.yml)"
#     DEPLOYMENT_FILE: deployment.yml
#     OC_URL: $OC_URL_STG
#     OC_TOKEN: $OC_TOKEN_STG

#     CI_TAG_AIRPORTS_SERVICE: $CI_PIPELINE_ID
#     CI_TAG_FLIGHTS_SERVICE: $CI_PIPELINE_ID
#     CI_TAG_PRESENTATION_SERVICE: $CI_PIPELINE_ID
#     CI_TAG_SALES_SERVICE: $CI_PIPELINE_ID
#     CI_TAG_SALESV2_SERVICE: $CI_PIPELINE_ID
#     CI_TAG_ZUUL_SERVICE: $CI_PIPELINE_ID
#     # CI_TAG_DESIGN_TEST: $CI_COMMIT_REF_NAME
#     # CI_TAG_PERFORMANCE_TEST: $CI_COMMIT_REF_NAME
#     # CI_TAG_FUNCTIONAL_TEST: $CI_COMMIT_REF_NAME
#     CI_IMG_AIRPORTS_SERVICE: $CONTAINER_AIRPORTS_SERVICE_IMAGE
#     CI_IMG_FLIGHTS_SERVICE: $CONTAINER_FLIGHTS_SERVICE_IMAGE
#     CI_IMG_PRESENTATION_SERVICE: $CONTAINER_PRESENTATION_SERVICE_IMAGE
#     CI_IMG_SALES_SERVICE: $CONTAINER_SALES_SERVICE_IMAGE
#     CI_IMG_SALESV2_SERVICE: $CONTAINER_SALESV2_SERVICE_IMAGE
#     CI_IMG_ZUUL_SERVICE: $CONTAINER_ZUUL_SERVICE_IMAGE
#     # CI_IMG_DESIGN_TEST: $GITLAB_DESIGN_TEST_REGISTRY
#     # CI_IMG_PERFORMANCE_TEST: $GITLAB_PERFORMANCE_TEST_REGISTRY
#     # CI_IMG_FUNCTIONAL_TEST: $GITLAB_FUNCTIONAL_TEST_REGISTRY
#     # CI_HIPTEST_FUNC_TEST: $HIPTEST_REGRESSION_TEST_STG
#     # TAG_GLOBALCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/stg\/env.sh'
#     # TAG_SYSTEMCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/glp-greetingapi-stg\/env.sh'
#   environment:
#     name: staging
#     url: http://presentation-$CI_PROJECT_PATH_SLUG.$OPENSHIFT_DOMAIN
#   only:
#       - master
#   except:
#     - triggers

# stop-staging:
#   <<: *stop
#   stage: deploy application
#   variables:
#     PROJECT: $CI_PROJECT_PATH_SLUG
#   when: manual
#   environment:
#     name: staging
#     action: stop
#   only:
#       - master

### deploy ###

### test application ###

stop-validate_api_description:
  <<: *stop
  stage: test application
  variables:
    PROJECT: $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME-airports-design-test
  when: manual
  environment:
    name: $CI_PROJECT_NAME/$CI_BUILD_REF_NAME
    action: stop
  only:
    - branches
  except:
    - master

validate_api_description:
  <<: *deploy
  stage: test application
  variables:
    OPENSHIFT_DOMAIN: dit-iaggs.com
    PROJECT: $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME-design-test
    DEPLOYMENT_CMD: "$(cat deployment-init.yml ./Airports/deployment.yml ./Flights/deployment.yml ./Zuul/deployment.yml ./Design-test/deployment.yml deployment-end.yml > deployment-design-test.yml)"
    DEPLOYMENT_FILE: deployment-design-test.yml
    OC_URL: $OC_URL_STG
    OC_TOKEN: $OC_TOKEN_STG

    CI_TAG_AIRPORTS_SERVICE: $CI_COMMIT_REF_NAME
    CI_TAG_FLIGHTS_SERVICE: $CI_COMMIT_REF_NAME
    # CI_TAG_PRESENTATION_SERVICE: $CI_COMMIT_REF_NAME
    # CI_TAG_SALES_SERVICE: $CI_COMMIT_REF_NAME
    # CI_TAG_SALESV2_SERVICE: $CI_COMMIT_REF_NAME
    # CI_TAG_ZUUL_SERVICE: $CI_COMMIT_REF_NAME
    CI_IMG_AIRPORTS_SERVICE: $GITLAB_AIRPORTS_SERVICE_REGISTRY
    CI_IMG_FLIGHTS_SERVICE: $GITLAB_FLIGHTS_SERVICE_REGISTRY
    # CI_IMG_PRESENTATION_SERVICE: $GITLAB_PRESENTATION_SERVICE_REGISTRY
    # CI_IMG_SALES_SERVICE: $GITLAB_SALES_SERVICE_REGISTRY
    # CI_IMG_SALESV2_SERVICE: $GITLAB_SALESV2_SERVICE_REGISTRY
    # CI_IMG_ZUUL_SERVICE: $GITLAB_ZUUL_SERVICE_REGISTRY

    CI_TAG_AIRPORTS_DESIGN_TEST: $CI_COMMIT_REF_NAME
    CI_IMG_AIRPORTS_DESIGN_TEST: $GITLAB_AIRPORTS_DESIGN_TEST_REGISTRY
    CI_TAG_FLIGHTS_DESIGN_TEST: $CI_COMMIT_REF_NAME
    CI_IMG_FLIGHTS_DESIGN_TEST: $GITLAB_FLIGHTS_DESIGN_TEST_REGISTRY
    
    TAG_GLOBALCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/stg\/env.sh'
    TAG_SYSTEMCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/glp-greetingapi-stg\/env.sh'
  environment:
    name: $CI_PROJECT_NAME/$CI_BUILD_REF_NAME
    url: http://presentation-$CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME-design-test.$OPENSHIFT_DOMAIN
    on_stop: stop-validate_api_description
  # when: manual
  except:
    - triggers

### test application ###